/*
 * CommanTools.java
 * @version 1.0 2012-4-13 YangMo
 * Copyright 2011 FreshView Tech Co. Ltd.
 * All right reserved.
 */

package net.loyin.ctrl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

/**
 * 文件上传工具类
 * @version 1.0 2012-4-13
 * @author YangMO
 */
public class UploadTools {
	
	private static String hexStr =  "0123456789ABCDEF";   

	public static String uploadFile(File file, String fileName,String dir) {

		String returnName = "";
		try {
			InputStream in = new FileInputStream(file);
			File fileDir = new File(dir);
			if (!fileDir.exists()) {
				fileDir.mkdirs();
			}
			fileDir.setReadable(true, false);
			fileDir.setExecutable(true, false);
			File uploadFile = new File(dir, fileName);
			OutputStream out = new FileOutputStream(uploadFile);
			uploadFile.setReadable(true, false);

			byte[] buffer = new byte[1024 * 1024];
			int length;
			while ((length = in.read(buffer)) > 0) {
				out.write(buffer, 0, length);
			}
			in.close();
			out.close();
		} catch (Exception ex) {
			ex.printStackTrace();
			return "";
		}
		return returnName;
	}
	
	/**  
     * @param hexString  
     * @return 将十六进制转换为字节数组  
     */  
    public static byte[] HexStringToBinary(String hexString){   
        //hexString的长度对2取整，作为bytes的长度   
        int len = hexString.length()/2;   
        byte[] bytes = new byte[len];   
        byte high = 0;//字节高四位   
        byte low = 0;//字节低四位   
  
        for(int i=0;i<len;i++){   
             //右移四位得到高位   
             high = (byte)((hexStr.indexOf(hexString.charAt(2*i)))<<4);   
             low = (byte)hexStr.indexOf(hexString.charAt(2*i+1));   
             bytes[i] = (byte) (high|low);//高地位做或运算   
        }   
        return bytes;   
    }   

    public static void saveAvatar(String dir,String userId,int type,String fileStr)
    {
    	try {			
    		byte[] bytes =HexStringToBinary(fileStr);
			File uploadFile = new File(dir,userId+"_"+type+".jpg");
			OutputStream out = new FileOutputStream(uploadFile);
			out.write(bytes);
			out.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
    }
    
	public static void main(String []args)
	{
		String tt
		byte[] bytes =HexStringToBinary(tt);
		try {
			File uploadFile = new File("d:\\temp\\1.jpg");
			OutputStream out = new FileOutputStream(uploadFile);
			out.write(bytes);
			out.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
